<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Messi]]></title>
    <url>%2F2019%2F06%2F05%2F%E9%A6%96%E9%A1%B5%E5%B0%81%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[You have to fight to reach your dream. You have to sacrifice and work hard for it.]]></content>
  </entry>
  <entry>
    <title><![CDATA[ObjC关键字]]></title>
    <url>%2F2018%2F06%2F24%2FObjC%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[1、const作用： 用来修饰右边的基本变量或指针变量 被修饰的变量只读，不能被修改 1int const a = 10; 等价于 const int a = 10; 1234int const *p // *p只读; p变量int * const p // *p变量; p只读const int * const p // p和*p都只读int const * const p // p和*p都只读 常用用法： 12NSString * const KCAppkey = @"appkey"; //定义一个全局只读变量static NSString *const KCErrorMsg = @"error network"; //static修饰后此全局变量只能本文件访问 与宏的区别： 执行时刻: 宏是预编译（编译之前处理），const是编译阶段。 编译检查: 宏不做检查，不会报编译错误，只是替换，const会编译检查，会报编译错误。 宏的好处: 宏能定义一些函数，方法。 const不能。 宏的坏处: 使用大量宏，容易造成编译时间久，每次都需要重新替换。 2、static作用： 修饰局部变量： 1.延长局部变量的生命周期,程序结束才会销毁。2.局部变量只会生成一份内存,只会初始化一次。 修饰全局变量 1.只能在本文件中访问,修改全局变量的作用域,生命周期不会改（防止被extern引用）2.避免重复定义全局变量 3、extern作用：只是用来获取全局变量(包括全局静态变量)的值，不能用于实现，而且定义和分配内存都在原来类中。原理：先在当前文件查找有没有全局变量，没有找到，才会去其他文件查找。static与const组合: 在每个文件都需要定义一份静态全局变量。extern与const组合: 只需要定义一份全局变量，多个文件共享。 4、UIKIT_EXTERN定义全局变量：在.h中： 123#import &lt;UIKit/UIKit.h&gt;UIKIT_EXTERN CGFloat const KCHeaderViewH;UIKIT_EXTERN CGFloat const KCHeaderViewW; 在.m中： 123#import &lt;UIKit/UIKit.h&gt;CGFloat const KCHeaderViewH = 40;CGFloat const KCHeaderViewW = 100; 再创建一个pch文件，导入上面类的头文件注意：创建pch文件需要在Target/Build Setting/Prefix Header下设置pch的路径，只需要当前工程内部路径。 5、属性参数主要分三类： 原子性：atomic，nonatomic 读写语义：readwrite，readonly，getter，setter 内存管理语义：assign，weak，unsafe_unretained，retain，strong，copy 其中最重要的是内存管理语义，要理解内存管理语义的作用和用法，首先要理解内存管理中的引用计数原理，也就是要理解OC的内存管理机制，属性参数的内存管理语义是OC中协助管理内存的很重要一部分。各种属性参数的含义和区别如下： atomic、nonatomic：原子性和非原子性。原子性是数据库原理里面的一个概念，ACID中的第一个。在多线程中同一个变量可能被多个线程访问甚至更改造成数据污染，因此为了安全，OC中默认是atomic，会对setter方法加锁，相应的也会付出维护原子性（数据加锁解锁等）的系统资源代价。应用中如果不是特殊情况（多线程间的通讯编程），一般还是用nonatomic来修饰变量的，不会对setter方法加锁，以提高多线程并发访问时的性能。atomic比nonatomic安全，但也并不是绝对的线程安全，例如多个线程同时调用set和get就会导致获得的对象值不一样。绝对的线程安全就要用 @synchronize，默认参数为atomic； readonly、readwrite：readonly表示变量只读，也就是它修饰的变量只有get方法没有set方法；readwrite就是既有get方法也有set方法了，可读亦可写； getter = &lt; gettername &gt;, setter = &lt; settername &gt;：可以选择性的在括号里直接指定存取方法的方法名，例如： 1@property(nonatomic, getter=isSelected, assign) BOOL selected; strong表示指向并拥有该对象。其修饰的对象引用计数会增加1。该对象只要引用计数不为0则不会被销毁。当然强行将其设为nil可以销毁它。 weak：主要可以用于避免循环引用，和strong/retain对应，功能上和assign一样简单，但不同的是用weak修饰的对象消失后会自动将指针置nil，防止出现‘悬挂指针’（指针的指向内存被删除导致）； unsafe_unretained：这种修饰方式不常用，通过名字看出它是不安全的，为什么这么说呢？首先它和weak类似都是自己创建并持有的对象之后却不会继续被自己持有(引用计数没有+1，引用计数为0的时候会被自动释放，尽管unsafe_unretained和weak修饰的指针还指向那个对象)。不同的是虽然在ARC中由编译器来自动管理内存，但unsafe_unretained修饰的变量并不会被编译器进行内存管理，也就是说既不是强引用也不是弱引用，生成的对象立刻就被释放掉了，也就是出现了所谓的‘悬挂指针’，所以不安全。 retain：常用于引用类型，是为了持有对象，声明强引用，将指针本来指向的旧的引用对象释放掉，然后将指针指向新的引用对象，同时将新对象的索引计数加1； strong：原理和retain类似，只不过在使用ARC自动引用计数时，用strong代替retain； copy：建立一个和新对象内容相同且索引计数为1的对象，指针指向这个对象，然后释放指针之前指向的旧对象。NSString变量一般都用copy修饰，因为字符串常用于直接复制，而不是去引用某个字符串； Objective-C 中，基本数据类型的默认关键字是atomic, readwrite, assign；普通属性的默认关键字是atomic, readwrite, strong。 6、所有权修饰符 __strong修饰符对应于上面的strong和retain还有copy，强引用来持有对象，通过引用计数来持有实例对象； __weak修饰符对应于上面的weak，用于防止循环引用问题； __unsafe __unretained修饰符对应于上面的assign和unsafe_unretained，创建但不持有对象，可能导致指针悬挂。 __block用于修饰变量。它是引用修饰，所以其修饰的值是动态变化的，即可以被重新赋值的。__block用于修饰某些block内部将要修改的外部变量。 7、访问权限修饰符 @protected：默认值，表示变量对子类可见，而对于其他类来说变量是私有的，不可访问； @private：表示变量完全私有化，只对本类可见，其子类也不可访问； @public：公开变量，表示变量对所有类都是开放可见的，都可以访问； @package：一般在开发静态类库的时候会用到，意思是这个关键词修饰的变量对于framework包内部来说是@protected类型的，而对于包外来说是@priviate类型的，这样可以实现包内变量的封装，包内可以使用而包外不可用，防止使用该包的人看到这些变量。 8、深拷贝与浅拷贝 浅拷贝： 拷贝的是指针地址，拷贝出来的对象与源对象地址一致! 这意味着我修改拷贝对象的值会直接影响到源对象. 深拷贝：拷贝出来的对象与源对象地址不一致! 这意味着我修改拷贝对象的值对源对象的值没有任何影响. copy：返回的对象是通过调用 copyWithZone: 这个方法返回的。 copyWithZone：可变对象采用的协议，用于提供自身的功能副本。是mutableCopyWithZone:简写形式 详细事例：声明以下变量： 1234@property (nonatomic, strong) NSArray *strongArr;@property (nonatomic, copy) NSArray *copyArr;@property (nonatomic, strong) NSMutableArray *strongMutableArr;@property (nonatomic, copy) NSMutableArray *copyMutableArr; 初始化： 1234self.sArr = @[@"s1"];self.cArr = @[@"c1"];self.sMutableArr = [NSMutableArray arrayWithArray:@[@"sm1"]];self.cMutableArr = [NSMutableArray arrayWithArray:@[@"cm1"]]; 进行赋值操作： 123456self.sArr = self.sMutableArr;self.cArr = self.sMutableArr;[self.sMutableArr addObject:@"sm2"];NSLog(@"self.sArr:%@ address:%p", self.sArr, self.sArr);NSLog(@"self.cArr:%@ address:%p", self.cArr, self.cArr);NSLog(@"self.sMutableArr:%@ address:%p", self.sMutableArr, self.sMutableArr); 得到结果： 123self.sArr:(sm1,sm2) address:0x600003c982a0self.cArr:(sm1) address:0x6000030c0990self.sMutableArr:(sm1,sm2) address:0x600003c982a0 结论：在cArr的setter方法中执行copy操作，copy一个mutable对象为深拷贝 继续操作： 1[self.cMutableArr addObject:@"cm2"]; 崩溃，报错如下： 1-[__NSSingleObjectArrayI addObject:]: unrecognized selector sent to instance 结论：在cMutableArr的setter方法中执行copy操作，copy一个mutable对象为深拷贝，得到一个不可变类型 接着继续操作： 12345NSArray *arr = @[@"1", @"2", @"3"];self.sArr = arr;self.cArr = arr;NSLog(@"self.sArr:%@ address:%p", self.sArr, self.sArr);NSLog(@"self.cArr:%@ address:%p", self.cArr, self.cArr); 得到： 12self.sArr:(1,2,3) address:0x6000012122e0self.cArr:(1,2,3) address:0x6000012122e0 结论：在cArr的setter方法中执行copy操作，copy一个immutable对象为浅拷贝，只拷贝一份指针，strong此时和copy一样 总结： 原对象类型 拷贝方式 新对象类型 拷贝类型（深/浅） mutable对象 copy 不可变 深拷贝 mutable对象 mutableCopy 可变 深拷贝 immutable对象 copy 不可变 浅拷贝 immutable对象 mutableCopy 可变 深拷贝 容器类可变对象mutableCopy和copy都返回一个新的容器，但容器内的元素仍然是浅拷贝；自定义类对象的深浅拷贝需继承&lt;NSCopying&gt;,&lt;NSMutableCopying&gt;实现协议方法copyWithZone,mutableCopyWithZone； 属性使用copy修饰时，本质是在其setter方法中进行了copy操作 strong对应的setter方法，先执行[_property release]，然后执行_property = [property retain]。 copy对应的setter方法，先执行[_property release]，然后执行_property = [property copy]。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS开发第三方库整理]]></title>
    <url>%2F2016%2F03%2F01%2FiOS%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[网络Moya - 抽象网络层 Alamofire - 网络 ResponseDetective - 调适网络请求 Reachability - 网络状况监控 存储SQLite.swift - 简单、轻量 SQLite 封装库 Realm - 移动端数据库 MagicalRecord - Core Data 帮手实现活动记录模式 SugarRecord - CoreData 与 Realm 的封装 Ensembles - Core Data 同步 界面弹窗SweetAlert - 带动画效果弹窗封装类 RAMAnimatedTabBarController - 带动画效果的tabbar控件库 布局SnapKit - 用代码轻松auto layout Cartography - 用代码轻松auto layout 其他XLPagerTabStrip - 分页控制器 Charts - 图表 LTMorphingLabel - 各种文字动画效果 FontAwesomeKit - 轻松地添加酷字体到你的app中 MGSwipeTableCell - 可滑动的table view cells PermissionScope - 巧妙的提前问用户要系统许可 SVProgressHUD - 自定义等待菊花 PKRevealController - 滑动边栏 SlackTextViewController - 高度自定义text field TextFieldEffects - 自定义外观text fields FontBlaster - 轻松在app中加载自定义字体 TAPromotee - 在你的app中交叉提示，置入界面 RETableViewManager - 用代码动态创建table view DZNEmptyDataSet - 空table view解决方案 PDTSimpleCalendar - 可放入日历组件 IGListKit - UICollectionView 框架 AsyncDisplayKit - 异步 UI SDK DZNEmptyDataSet - 空状态模式 Chameleon - 扁平化颜色框架 MGSwipeTableCell - 可以滑动的 table cells FSCalendar - 日历 ImageViewer - 模仿 Twitter 的图片查看器 刷新BreakOutToRefresh - 一个下拉刷新打砖块的swift库 SDRefreshView 简单易用的上拉和下拉刷新 ZLSwiftRefresh - 下拉刷新/上拉加载更多，支持自定义动画，集成简单 GearRefreshControl - 一个非常精细的下拉刷新 做的很细心 refresher - 简洁清爽的下拉刷新 PullToBounce - 弹性动画 非常炫酷的下拉刷新 RCTRefreshControl - qq的橡皮糖下拉刷新 PullToRefresh - 刷新动画可定制的下拉数据请求更新组件 MLSwiftBasic - 集合自定义导航栏、下拉刷新/上拉加载更多、视觉效果、好用分类等等一系列，却耦合性很低的Swift库! 图片SDWebImage - OC 图片加载框架 GPUImage - 快速图像处理 Concorde - 下载和解码进度化JPEGs Kingfisher - 下载图片 SKPhotoBrowser - 图片浏览 Fusuma - 拍照与查看 动画Spring - 动画框架 Hero - 自定义试图控制器过渡动画 调试DebugMan - 本地调试 Quick + Nimble - BDD 测试 GDPerformanceView - 实时 FPS and CPU 用量 框架RxSwift - reactive 编程 ReactiveCocoa - FRP框架 PromiseKit - promises Cleanse - 轻量级且功能完善的 Swift 版依赖注入框架 其他工具解析SwiftyJSON - JSON 解析 其他Valet - 钥匙串帮手 Firebase Analytics - 分析 PermissionScope - iOS 权限框架 FileKit - 文件管理 SwiftyUserDefaults - user defaults 帮手 Hedwig - 发送 email DeviceKit - 设备信息 RandomKit - 随机生成数字 Onboard - 用户指导页 Natalie - 从 storyboard 生成代码 SwiftyStoreKit - app 内购 Timepiece - date 帮手 CryptoSwift - 加密 iRate - 获得用户评价 GameCenterManager - 轻松管理Game Center IAPHelper - app内购封装帮手 KeychainAccess - 轻松管理钥匙串]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[过滤字符串]]></title>
    <url>%2F2016%2F01%2F14%2F%E8%BF%87%E6%BB%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[这里是过滤数组中的一组字符串，如果需要过滤单个字符串去掉外层for循环 12345678910func removeSpecialCharacters( sourceArr : [String],specialCharacters : [String])-&gt;[String] &#123; var finalArr = [String]() for var sourceStr : String in sourceArr &#123; for character : String in specialCharacters &#123; sourceStr = sourceStr.stringByReplacingOccurrencesOfString(character, withString: "", options: NSStringCompareOptions.LiteralSearch, range: nil) &#125; finalArr.append(sourceStr) &#125; return finalArr&#125;]]></content>
      <categories>
        <category>iOS</category>
        <category>Swift</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[OC与Swift混编]]></title>
    <url>%2F2016%2F01%2F13%2FOC%E4%B8%8ESwift%E6%B7%B7%E7%BC%96%2F</url>
    <content type="text"><![CDATA[Swift中使用OC 直接新建一个OC的空文件，根据系统提示创建桥文件，在桥文件中导入需要使用的OC的头文件 OC中使用Swift 在OC的类中添加头文件#import &quot;OCandSwift-swift.h&quot;“OCandSwift” 为 Product Module Name 在 Build Settings 中选择 All 可以找到]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>混编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单例在Swift中的正确实现方式]]></title>
    <url>%2F2015%2F12%2F26%2F%E5%8D%95%E4%BE%8B%E5%9C%A8Swift%E4%B8%AD%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[原文链接中文校对 单例三要素 唯一性：在一个应用程序的生命周期中，只有一个实例存在。单例提供了一个唯一的全局状态，例如：NSNotification，UIApplication和NSUserDefaults 构造器私有：为了保证单例的唯一性，构造器必须私有，防止其他对象也能创建出单例类的实例 线程安全：确保单例在整个应用程序的生命周期中是唯一的，防止两个线程在同一时间初始化同一个单例，这样就有潜在的风险得到两个不同的单例。使用GCD的dispatch_once来确保初始化单例的代码在运行时只执行一次 OC12345678+ (instancetype)sharedDataCenter &#123; static KCDataCenter *dataCenter = nil; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; dataCenter = [[KCDataCenter alloc] init]; &#125;); return dataCenter;&#125; Swift最优雅的写法如果你深谙单例三要素，相信这种写法你很容易接收 1234class KCDataCenter &#123; static let sharedDataCenter = KCDataCenter() private init() &#123;&#125;&#125; 演变过程 照搬OC写法123456789101112class KCDataCenter &#123; class var sharedDataCenter: KCDataCenter &#123; struct Static &#123; static var onceToken : dispatch_once_t = 0 static var dataCenter : KCDataCenter? = nil &#125; dispatch_once(&amp;Static.onceToken) &#123; static.dataCenter = KCDataCenter() &#125; return Static.dataCenter! &#125;&#125; 结构体写法12345678class KCDataCenter &#123; class var sharedDataCenter : KCDataCenter &#123; struct Static &#123; static let dataCenter = KCDataCenter() &#125; return Static.dataCenter &#125;&#125; 全局变量写法中文校对版中这里有一处错误，详解请看原文 123456private let dataCenter = KCDataCenter()class KCDataCenter &#123; class var sharedDataCenter : KCDataCenter &#123; return dataCenter &#125;&#125; private保证线程安全 “全局变量（静态成员变量和结构体以及枚举）的延迟构造器在其被第一次访问时会加载，并以dispatch_once的方式启动来确保初始化的原子性。这让你写代码时可以用一种很酷的方式来使用dispatch_once：直接用一个全局变量的构造器去做初始化并用private来修饰。“ — Apple’s Swift Blog 接下来就是最优雅的写法1234class KCDataCenter &#123; static let sharedDataCenter = KCDataCenter() private init() &#123;&#125;&#125; 详解请看原文博客或中文校对版]]></content>
      <categories>
        <category>iOS</category>
        <category>Swift</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[判断字符串是否是数字]]></title>
    <url>%2F2015%2F12%2F25%2F%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[OC1234567NSString *inputString = @&quot;123456&quot;;inputString = [string stringByTrimmingCharactersInSet[NSCharacterSet decimalDigitCharacterSet]];if(inputString.length &lt; 0) &#123; //都是数字&#125; else &#123; //不是数字&#125; Swift123456let inputString : NSString = searchString!.stringByTrimmingCharactersInSet(NSCharacterSet.decimalDigitCharacterSet())if inputString.length &lt; 0 &#123; // 都是数字&#125; else &#123; // 不是数字&#125;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown使用指南]]></title>
    <url>%2F2015%2F09%2F02%2Fmarkdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[标题1234# 一级标题## 二级标题......###### 六级标题 列表12* 无序列表1、2、3 有序列表 引用12345&gt; 引用内容&gt; &gt; 多级引用&gt; * 无序列表&gt; 1. 有序列表&gt; [链接](地址) 链接123[链接标题](链接地址)&lt;邮箱地址&gt;!\[图片简介](图片地址) 字体强调12粗体 : **粗体内容** 快捷键 command + B斜体 : *斜体内容* 快捷键 command + I 代码12单行代码 : `代码行`代码块 : ```代码块 swift : 表示代码语言是Swift]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>
